name: Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'
    - name: Install and set up poetry
      run: |
        python -m pip install --upgrade pip
        python -m pip install poetry
        poetry config virtualenvs.in-project true
    - name: Cache
      uses: actions/cache@v2.1.6
      with:
        path: |
          .venv
          ~/.cache/pip
          /usr/local/bin
          /usr/local/lib/python3.8/site-packages
        key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
    - name: Install dependencies
      run: |
        poetry install
    - name: Black check
      run: |
        poetry run black --check .
    - name: Test with pytest
      run: |
        poetry run pytest .
    - name: Test with mypy
      run: |
        poetry run mypy .
    - name: Publish to TestPyPi
      env:
        PYPI_API_TOKEN: ${{ secrets.TEST_PYPI_API_TOKEN }}
      run: |
        # replace version with $version+$short-commit-hash
        sed -r -i'' "s/(^version = \")([0-9]+\.[0-9]+\.)([0-9]+)\"/\1\2$(git show -s --format=%ct HEAD)\"/" pyproject.toml
        poetry build
        poetry config pypi-token.testpypi $PYPI_API_TOKEN
        poetry config repositories.testpypi https://test.pypi.org/legacy/
        poetry publish -r testpypi
    - name: Publish to PyPi
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
      env:
        PYPI_API_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        poetry build
        poetry config pypi-token.pypi $PYPI_API_TOKEN
        poetry publish
